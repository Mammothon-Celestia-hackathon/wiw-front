/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  "\n  mutation createUser($address: String!) {\n    createUser(createUserInput: { address: $address }) {\n      id\n      name\n      address\n      signature\n      avatar\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation createGame(\n    $limit: Int!\n    $name: String!\n    $defaultBettingAmount: Float!\n    $topic: String!\n    $ownerUserAddress: String!\n    $firstAiAgentId: String!\n    $secondAiAgentId: String!\n  ) {\n    createGame(\n      createGameInput: {\n        limit: $limit\n        name: $name\n        defaultBettingAmount: $defaultBettingAmount\n        topic: $topic\n        ownerAddress: $ownerUserAddress\n        firstAiAgentId: $firstAiAgentId\n        secondAiAgentId: $secondAiAgentId\n      }\n    ) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation sendMessage(\n    $gameId: String!\n    $senderAddress: String!\n    $content: String!\n    $messageType: String!\n  ) {\n    sendMessage(\n      gameId: $gameId\n      senderAddress: $senderAddress\n      content: $content\n      messageType: $messageType\n    ) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      content\n      messageType\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation joinGame($gameId: String!, $userAddress: String!) {\n    joinGame(gameId: $gameId, userAddress: $userAddress) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation updateAiAgent(\n    $aiAgentId: String!\n    $updateAiAgentInput: UpdateAiAgentInput!\n  ) {\n    updateAiAgent(\n      aiAgentId: $aiAgentId\n      updateAiAgentInput: $updateAiAgentInput\n    ) {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  mutation createAiAgent($createAiAgentInput: CreateAiAgentInput!) {\n    createAiAgent(createAiAgentInput: $createAiAgentInput) {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  mutation broadcastEvent($gameId: String!, $event: String!) {\n    broadcastEvent(gameId: $gameId, event: $event)\n  }\n\n  mutation createBetting(\n    $gameId: String!\n    $createBettingInput: CreateBettingInput!\n  ) {\n    createBetting(gameId: $gameId, createBettingInput: $createBettingInput) {\n      bettingAmount\n      bettingTokenDenom\n      ownerAddress\n      result\n      predictionWinnerAiAgentId\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation deleteAllMessagesInGame($gameId: String!) {\n    deleteAllMessagesInGame(gameId: $gameId)\n  }\n\n  mutation deleteAllBettingsInGame($gameId: String!) {\n    deleteAllBettingsInGame(gameId: $gameId)\n  }\n\n  mutation updateWinnerAiAgent($gameId: String!, $aiAgentId: String!) {\n    updateWinnerAiAgent(gameId: $gameId, aiAgentId: $aiAgentId)\n  }\n": types.CreateUserDocument,
  "\n  query getGamesByOwnerAddress($address: String!) {\n    getGamesByOwnerAddress(ownerAddress: $address) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  query getMessagesByGame($gameId: String!, $userAddress: String!) {\n    getMessagesByGame(gameId: $gameId, userAddress: $userAddress) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      senderAddress\n      content\n      messageType\n      createdAt\n      updatedAt\n      gameId\n    }\n  }\n\n  query getJoinedGames($userAddress: String!) {\n    getJoinedGames(userAddress: $userAddress) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  query isJoinedGame($gameId: String!, $userAddress: String!) {\n    isJoinedGame(gameId: $gameId, userAddress: $userAddress)\n  }\n\n  query getAllAiAgent {\n    getAllAiAgent {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  query getGameById($id: String!) {\n    getGameById(id: $id) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetGamesByOwnerAddressDocument,
  "\n  subscription newMessage($gameId: String!) {\n    newMessage(gameId: $gameId) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      content\n      messageType\n      createdAt\n      gameId\n      senderAddress\n    }\n  }\n\n  subscription newStatus($gameId: String!) {\n    newStatus(gameId: $gameId) {\n      event\n      game {\n        id\n        name\n        limit\n        defaultBettingAmount\n        bettingTokenDenom\n        owner {\n          id\n          address\n          avatar\n        }\n        users {\n          id\n          address\n          avatar\n        }\n        bettings {\n          bettingAmount\n          bettingTokenDenom\n          ownerAddress\n          result\n          predictionWinnerAiAgentId\n          createdAt\n          updatedAt\n        }\n        aiAgents {\n          id\n          name\n          address\n          context\n          createdAt\n          updatedAt\n        }\n        winnerAiAgentId\n        topic\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.NewMessageDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createUser($address: String!) {\n    createUser(createUserInput: { address: $address }) {\n      id\n      name\n      address\n      signature\n      avatar\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation createGame(\n    $limit: Int!\n    $name: String!\n    $defaultBettingAmount: Float!\n    $topic: String!\n    $ownerUserAddress: String!\n    $firstAiAgentId: String!\n    $secondAiAgentId: String!\n  ) {\n    createGame(\n      createGameInput: {\n        limit: $limit\n        name: $name\n        defaultBettingAmount: $defaultBettingAmount\n        topic: $topic\n        ownerAddress: $ownerUserAddress\n        firstAiAgentId: $firstAiAgentId\n        secondAiAgentId: $secondAiAgentId\n      }\n    ) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation sendMessage(\n    $gameId: String!\n    $senderAddress: String!\n    $content: String!\n    $messageType: String!\n  ) {\n    sendMessage(\n      gameId: $gameId\n      senderAddress: $senderAddress\n      content: $content\n      messageType: $messageType\n    ) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      content\n      messageType\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation joinGame($gameId: String!, $userAddress: String!) {\n    joinGame(gameId: $gameId, userAddress: $userAddress) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation updateAiAgent(\n    $aiAgentId: String!\n    $updateAiAgentInput: UpdateAiAgentInput!\n  ) {\n    updateAiAgent(\n      aiAgentId: $aiAgentId\n      updateAiAgentInput: $updateAiAgentInput\n    ) {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  mutation createAiAgent($createAiAgentInput: CreateAiAgentInput!) {\n    createAiAgent(createAiAgentInput: $createAiAgentInput) {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  mutation broadcastEvent($gameId: String!, $event: String!) {\n    broadcastEvent(gameId: $gameId, event: $event)\n  }\n\n  mutation createBetting(\n    $gameId: String!\n    $createBettingInput: CreateBettingInput!\n  ) {\n    createBetting(gameId: $gameId, createBettingInput: $createBettingInput) {\n      bettingAmount\n      bettingTokenDenom\n      ownerAddress\n      result\n      predictionWinnerAiAgentId\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation deleteAllMessagesInGame($gameId: String!) {\n    deleteAllMessagesInGame(gameId: $gameId)\n  }\n\n  mutation deleteAllBettingsInGame($gameId: String!) {\n    deleteAllBettingsInGame(gameId: $gameId)\n  }\n\n  mutation updateWinnerAiAgent($gameId: String!, $aiAgentId: String!) {\n    updateWinnerAiAgent(gameId: $gameId, aiAgentId: $aiAgentId)\n  }\n"): (typeof documents)["\n  mutation createUser($address: String!) {\n    createUser(createUserInput: { address: $address }) {\n      id\n      name\n      address\n      signature\n      avatar\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation createGame(\n    $limit: Int!\n    $name: String!\n    $defaultBettingAmount: Float!\n    $topic: String!\n    $ownerUserAddress: String!\n    $firstAiAgentId: String!\n    $secondAiAgentId: String!\n  ) {\n    createGame(\n      createGameInput: {\n        limit: $limit\n        name: $name\n        defaultBettingAmount: $defaultBettingAmount\n        topic: $topic\n        ownerAddress: $ownerUserAddress\n        firstAiAgentId: $firstAiAgentId\n        secondAiAgentId: $secondAiAgentId\n      }\n    ) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation sendMessage(\n    $gameId: String!\n    $senderAddress: String!\n    $content: String!\n    $messageType: String!\n  ) {\n    sendMessage(\n      gameId: $gameId\n      senderAddress: $senderAddress\n      content: $content\n      messageType: $messageType\n    ) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      content\n      messageType\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation joinGame($gameId: String!, $userAddress: String!) {\n    joinGame(gameId: $gameId, userAddress: $userAddress) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation updateAiAgent(\n    $aiAgentId: String!\n    $updateAiAgentInput: UpdateAiAgentInput!\n  ) {\n    updateAiAgent(\n      aiAgentId: $aiAgentId\n      updateAiAgentInput: $updateAiAgentInput\n    ) {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  mutation createAiAgent($createAiAgentInput: CreateAiAgentInput!) {\n    createAiAgent(createAiAgentInput: $createAiAgentInput) {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  mutation broadcastEvent($gameId: String!, $event: String!) {\n    broadcastEvent(gameId: $gameId, event: $event)\n  }\n\n  mutation createBetting(\n    $gameId: String!\n    $createBettingInput: CreateBettingInput!\n  ) {\n    createBetting(gameId: $gameId, createBettingInput: $createBettingInput) {\n      bettingAmount\n      bettingTokenDenom\n      ownerAddress\n      result\n      predictionWinnerAiAgentId\n      createdAt\n      updatedAt\n    }\n  }\n\n  mutation deleteAllMessagesInGame($gameId: String!) {\n    deleteAllMessagesInGame(gameId: $gameId)\n  }\n\n  mutation deleteAllBettingsInGame($gameId: String!) {\n    deleteAllBettingsInGame(gameId: $gameId)\n  }\n\n  mutation updateWinnerAiAgent($gameId: String!, $aiAgentId: String!) {\n    updateWinnerAiAgent(gameId: $gameId, aiAgentId: $aiAgentId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGamesByOwnerAddress($address: String!) {\n    getGamesByOwnerAddress(ownerAddress: $address) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  query getMessagesByGame($gameId: String!, $userAddress: String!) {\n    getMessagesByGame(gameId: $gameId, userAddress: $userAddress) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      senderAddress\n      content\n      messageType\n      createdAt\n      updatedAt\n      gameId\n    }\n  }\n\n  query getJoinedGames($userAddress: String!) {\n    getJoinedGames(userAddress: $userAddress) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  query isJoinedGame($gameId: String!, $userAddress: String!) {\n    isJoinedGame(gameId: $gameId, userAddress: $userAddress)\n  }\n\n  query getAllAiAgent {\n    getAllAiAgent {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  query getGameById($id: String!) {\n    getGameById(id: $id) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query getGamesByOwnerAddress($address: String!) {\n    getGamesByOwnerAddress(ownerAddress: $address) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  query getMessagesByGame($gameId: String!, $userAddress: String!) {\n    getMessagesByGame(gameId: $gameId, userAddress: $userAddress) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      senderAddress\n      content\n      messageType\n      createdAt\n      updatedAt\n      gameId\n    }\n  }\n\n  query getJoinedGames($userAddress: String!) {\n    getJoinedGames(userAddress: $userAddress) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n\n  query isJoinedGame($gameId: String!, $userAddress: String!) {\n    isJoinedGame(gameId: $gameId, userAddress: $userAddress)\n  }\n\n  query getAllAiAgent {\n    getAllAiAgent {\n      id\n      name\n      context\n      address\n    }\n  }\n\n  query getGameById($id: String!) {\n    getGameById(id: $id) {\n      id\n      name\n      limit\n      defaultBettingAmount\n      bettingTokenDenom\n      owner {\n        id\n        address\n        avatar\n      }\n      users {\n        id\n        address\n        avatar\n      }\n      bettings {\n        bettingAmount\n        bettingTokenDenom\n        ownerAddress\n        result\n        predictionWinnerAiAgentId\n        createdAt\n        updatedAt\n      }\n      aiAgents {\n        id\n        name\n        address\n        context\n        createdAt\n        updatedAt\n      }\n      winnerAiAgentId\n      topic\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription newMessage($gameId: String!) {\n    newMessage(gameId: $gameId) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      content\n      messageType\n      createdAt\n      gameId\n      senderAddress\n    }\n  }\n\n  subscription newStatus($gameId: String!) {\n    newStatus(gameId: $gameId) {\n      event\n      game {\n        id\n        name\n        limit\n        defaultBettingAmount\n        bettingTokenDenom\n        owner {\n          id\n          address\n          avatar\n        }\n        users {\n          id\n          address\n          avatar\n        }\n        bettings {\n          bettingAmount\n          bettingTokenDenom\n          ownerAddress\n          result\n          predictionWinnerAiAgentId\n          createdAt\n          updatedAt\n        }\n        aiAgents {\n          id\n          name\n          address\n          context\n          createdAt\n          updatedAt\n        }\n        winnerAiAgentId\n        topic\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription newMessage($gameId: String!) {\n    newMessage(gameId: $gameId) {\n      id\n      sender {\n        id\n        address\n        avatar\n      }\n      content\n      messageType\n      createdAt\n      gameId\n      senderAddress\n    }\n  }\n\n  subscription newStatus($gameId: String!) {\n    newStatus(gameId: $gameId) {\n      event\n      game {\n        id\n        name\n        limit\n        defaultBettingAmount\n        bettingTokenDenom\n        owner {\n          id\n          address\n          avatar\n        }\n        users {\n          id\n          address\n          avatar\n        }\n        bettings {\n          bettingAmount\n          bettingTokenDenom\n          ownerAddress\n          result\n          predictionWinnerAiAgentId\n          createdAt\n          updatedAt\n        }\n        aiAgents {\n          id\n          name\n          address\n          context\n          createdAt\n          updatedAt\n        }\n        winnerAiAgentId\n        topic\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;